<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="BigyanDisable" type="Workflow">
  <Description>A rule used by a Workflow to determine a step action or variable value.

Note that an Attributes map of all variables from the current WorkflowContext, merged with the arguments from the Step, is also passed into the workflow rule.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="wfcontext">
        <Description>
          The current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="handler">
        <Description>
          The workflow handler associated with the current WorkflowContext.
        </Description>
      </Argument>
      <Argument name="workflow">
        <Description>
          The current Workflow definition.
        </Description>
      </Argument>
      <Argument name="step">
        <Description>
          The current Step.
        </Description>
      </Argument>
      <Argument name="approval">
        <Description>
          The current Approval.
        </Description>
      </Argument>
      <Argument name="item">
        <Description>
          The WorkItem being processed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Object">
        <Description>
          The result of the workflow rule; dependent on the rule itself.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[import java.util.*;
  import java.lang.String;
  import sailpoint.object.Identity;
  import sailpoint.api.IdentityService;
  import sailpoint.object.Application;
  import sailpoint.object.Link;
  import java.util.List;
  import java.util.Map;
  import java.util.HashMap;
  
  import sailpoint.api.SailPointContext;
  
 import java.util.Arrays;
 import sailpoint.object.ProvisioningPlan;
 import sailpoint.object.ProvisioningPlan.AccountRequest;
 import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
  import  sailpoint.api.Provisioner;

 




		// for testing purpose only Dont forget to remove the first line code
   Identity identity1 = context.getObjectById(Identity.class, userName);
System.out.println(identity1.getName());
String name = identity1.getName();
Identity identity = context.getObjectByName(Identity.class, name);
       
    
String nativeIdentity;
    
IdentityService serv=new IdentityService(context);
      Application application=context.getObjectByName(Application.class,"Dexpert AD Group 13 latest");
     List links=serv.getLinks(identity,application);
	 
			if(null != links )//&amp;&amp; !links.isEmpty())
      {
        Link link=links.get(0);
       nativeIdentity =link.getNativeIdentity();
      }
ProvisioningPlan plan = new ProvisioningPlan();
AccountRequest accountRequest = new AccountRequest();

System.out.println("nativeIdentity"+nativeIdentity);
plan.setIdentity(identity);
accountRequest.setApplication("Dexpert AD Group 13 latest");
accountRequest.setNativeIdentity(nativeIdentity);

accountRequest.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);


    

List accreqList = new ArrayList();
accreqList.add(accountRequest);
plan.setAccountRequests(accreqList);

		plan.setIdentity(identity); 
		//log.error(plan.toXml());
    System.out.println(plan.toXml());
		
    
Provisioner provisioner = new Provisioner(context);
provisioner.execute(plan);

return identity;]]></Source>
</Rule>