<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="test" type="FieldValue">
  <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The Identity object that represents the user needing the field value.
        </Description>
      </Argument>
      <Argument name="link" type="Link">
        <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
      </Argument>
      <Argument name="group" type="ManagedAttribute">
        <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="project" type="ProvisioningProject">
        <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
      </Argument>
      <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
        <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
        <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="role" type="Bundle">
        <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="application" type="Application">
        <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="template" type="Template">
        <Description>
          The Template that contains this field.
        </Description>
      </Argument>
      <Argument name="field" type="Field">
        <Description>
          The current field being computed.
        </Description>
      </Argument>
      <Argument name="current" type="Object">
        <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
      </Argument>
      <Argument name="operation" type="ProvisioningPlan.Operation">
        <Description>
          The operation being performed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          The string value created.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[import sailpoint.object.*;
import java.util.regex;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
  import java.util.*;
  import sailpoint.api.IdentityService;
import sailpoint.object.Application;
  import sailpoint.api.SailpointContext;
  import sailpoint.object.Identity;
  import java.util.Iterator;
  import java.util.Arrays;
  import sailpoint.object.Link;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
 
  
 public boolean ismsDomainAccountExistInAD(String accountName)
  { 
    boolean isAccountExist = false;
    QueryOptions qo = new QueryOptions();
    Filter f = Filter.and(Filter.eq("application.name", "Dexpert_Application_AD_Provisioning"), Filter.eq("displayName", accountName));//application.name//"sAMAccountName"
    qo.addFilter(f);
    Iterator it = context.search(Link.class, qo);
    
    if(null != it && it.hasNext())
    { 
 
      
       
        isAccountExist = true;
    

    }
    return isAccountExist;  
  }
  
  public String getmsDomainName(Identity identity)
    { 
  boolean accountExists=false;
  
  String msDomain="";
  
    String firstName = identity.getAttribute("firstname").toLowerCase();
    String lastName = identity.getAttribute("lastname").toLowerCase();
	if(lastName.length()>7)
	{
	
    msDomain=firstName.substring(0,1)+lastName.substring(0,7);    
	}
	else
	{
    msDomain=firstName.substring(0,1)+lastName;
			}
      if(msDomain!=null)
       {
        
        accountExists = ismsDomainAccountExistInAD(msDomain);
         System.out.println("Acount Exist outside loop----------");
              System.out.println(accountExists);
        
         for(int i=1;i<99;i++)
        {
          //if (accountExists){
			  if(lastName.length()>=6)
            {
            if(i<10)
			{
            msDomain=firstName.substring(0,1)+lastName.substring(0,6)+i;
			}
			else
			{
				 msDomain=firstName.substring(0,1)+lastName.substring(0,5)+i;
				
			}
			}
            else
            {
              msDomain=firstName.substring(0,1)+lastName.substring(0,lastName.length())+i;
            }
                 
            accountExists = ismsDomainAccountExistInAD(msDomain);
            if(accountExists)
            {
              System.out.println("need to find new dn:: "+msDomain);
               System.out.println("Acount Exist inside loop----------");
              System.out.println(accountExists);
            }
            else
            {
            System.out.println("Final domain name inside the loop:: "+msDomain);
    				return msDomain;
            }
       // }
        
  }
       
        return msDomain;
   
    } 
  }
     
   
return getmsDomainName(identity);

  ]]></Source>
</Rule>